//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public CollisionComponent collision { get { return (CollisionComponent)GetComponent(ComponentIds.Collision); } }

        public bool hasCollision { get { return HasComponent(ComponentIds.Collision); } }

        public Entity AddCollision(UnityEngine.Collider newOther, UnityEngine.LayerMask newTankMask, float newExplosionRadius, float newMaxDamage, float newExplosionForce) {
            var component = CreateComponent<CollisionComponent>(ComponentIds.Collision);
            component.other = newOther;
            component.tankMask = newTankMask;
            component.explosionRadius = newExplosionRadius;
            component.maxDamage = newMaxDamage;
            component.explosionForce = newExplosionForce;
            return AddComponent(ComponentIds.Collision, component);
        }

        public Entity ReplaceCollision(UnityEngine.Collider newOther, UnityEngine.LayerMask newTankMask, float newExplosionRadius, float newMaxDamage, float newExplosionForce) {
            var component = CreateComponent<CollisionComponent>(ComponentIds.Collision);
            component.other = newOther;
            component.tankMask = newTankMask;
            component.explosionRadius = newExplosionRadius;
            component.maxDamage = newMaxDamage;
            component.explosionForce = newExplosionForce;
            ReplaceComponent(ComponentIds.Collision, component);
            return this;
        }

        public Entity RemoveCollision() {
            return RemoveComponent(ComponentIds.Collision);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherCollision;

        public static IMatcher Collision {
            get {
                if (_matcherCollision == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.Collision);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherCollision = matcher;
                }

                return _matcherCollision;
            }
        }
    }
}
